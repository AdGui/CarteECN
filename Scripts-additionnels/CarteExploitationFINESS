library("maptools")
library("maps")
library("rgdal")
library("RColorBrewer")
library("classInt")
library("ggmap")
library("spatstat")
library("rgeos")
library("reshape2")
library("KernSmooth")
library("ks")
library("fields")

#attention au dossier de travail
communes<-readOGR (getwd(), layer="COMMUNE", stringsAsFactors=FALSE)
dpt<-readOGR (getwd(), layer="LIMITE_DEPARTEMENT", stringsAsFactors=FALSE)
dpt<-readOGR ("./SHP/GEOFLA", layer="DEPARTEMENT", stringsAsFactors=FALSE)
BRG<-communes[is.element(communes$CODE_DEPT, c(21,58,71,89)),]
#breaks=c(0,.1,.2,.4,1,4,20,110)
#BRG$POPULATION.f<- factor(cut(BRG$POPULATION,breaks,include.lowest=TRUE))
#spplot(BRG,"POPULATION.f")
BRGll<-spTransform(BRG,CRS("+proj=longlat +ellps=WGS84"))
dptll<-spTransform(dpt,CRS("+proj=longlat +ellps=WGS84"))

#
routesidf<-readShapeLines("roads.shp",proj4string=CRS("+proj=longlat"))
plot(dptll,xlim=c(2.2,2.4),ylim=c(48.75,48.95))
plot(routesidf[routesidf$type=="primary",],add=TRUE,lwd=2,col="lightgray")
plot(routesidf[routesidf$type=="secondary",],add=TRUE,lwd=2,col="lightgray")
trainsidf<-readShapeLines("railways.shp",proj4string=CRS("+proj=longlat"))
plot(trainsidf[trainsidf$type=="rail",],add=TRUE,lwd=1,col="burlywood3")
setwd("D:/Utilisateurs/aguilloteau/Documents/GeoR/SHP") #au bon endroit !
dpt<-readShapeSpatial("DEPARTEMENT.SHP")

#
etalab_cs1100502_stock_20131106.0350 <- read.csv("./Donnees/etalab_cs1100502_stock_20131106-0350.csv", sep=";", dec=",")
Finn<-etalab_cs1100502_stock_20131106.0350
rm(etalab_cs1100502_stock_20131106.0350)
dptBRG<-is.element(Finn$DPT,c(21,58,71,89))
dptBRG<-which(dptBRG==TRUE)
sub("Ž","é",levels(Finn$TypeES1))
FinnBRG<-Finn[dptBRG,]
FinnBRGCH<-FinnBRG[which(FinnBRG$CodeES1==620),]
CP<-substr(FinnBRGCH$Comm, 1, 5)
CP<-as.factor(CP)
dfCP<-data.frame(Nbr=rep(0,208),CP=rep(0,208))
for(i in 1:length(levels(CP))){
  dfCP[i,1]<-length(which(CP==levels(CP)[i]))
  dfCP[i,2]<-levels(CP)[i]
}
BRG$CP1<-paste(BRG$CODE_DEPT,BRG$CODE_COMM,sep="",collapse=NULL)
dfCP$CI<-0
insee<-read.csv("./Donnees/insee.csv", sep=";", dec=",")
for(i in 1:length(dfCP[,1])){
  dfCP$CI[i]<-insee$INSEE[(which(dfCP$CP[i]==insee$Codepos)[1])]
}
#merge(BRG,dfCP,CI)
BRG$CP1<-as.numeric(BRG$CP1)
dfCP$CI<-as.numeric(dfCP$CI)
BRG$NbPh<-0
for(i in 1:length(BRG$CP1)){
  BRG$NbPh[i]<- if(length(dfCP$Nbr[which(BRG$CP1[i]==dfCP$CI)])==0) 0 else dfCP$Nbr[which(BRG$CP1[i]==dfCP$CI)]
}
color<-classIntervals(BRG$NbPh,style="fixed",fixedBreaks=c(0,1,5,10,25,100))

#
spplot(BRG,"NbPh",col.regions=color)
BRG$NbPh[which(BRG$NbPh==0)]<-NA
spplot(BRG,"NbPh",col.regions=brewer.pal(5, "Set3"), scales=list(draw = TRUE))
spplot(BRG,"NbPh",col.regions=brewer.pal(9,"Blues"))

#
dfCP$NbPhC<-0
for(i in 1:length(dfCP$Nbr)){
  dfCP$NbPhC[i]<-classIntervals(dfCP$Nbr,4)[[i]]
}

#test1 - variables
setwd("~/R/GeoR/SHP")
dpt<-readOGR (getwd(), layer="LIMITE_DEPARTEMENT", stringsAsFactors=FALSE)
dptll<-spTransform(dpt,CRS("+proj=longlat +ellps=WGS84"))
nbclr<-6
class<-classIntervals(BRG$NbPh, n=6, style="fixed", fixedBreaks=c(0,1,2,5,10,25,100),intervalClosure="left")
plotclr <- brewer.pal(nbclr,"BuPu")
colcode <- findColours(class, plotclr)

#test1-plot
plot(BRGll)
plot(BRGll, col=colcode, add=T)
title(main="Nombre de pharmacie en Bourgogne", sub="Par commune")
legend(5.52, 47, legend=names(attr(colcode, "table")), fill=attr(colcode, "palette"), cex=0.6, bty="n")
plot(dptll,add=T,xlim=c(2.5,5.6),lwd=2)

#test2-plot
ll<-c()
ll<-as.list(ll)
lon<-c()
lat<-c()
for(i in 1:length(FinnBRGCH[,1])){
  ll[[i]]<-geocode(paste(as.character(FinnBRGCH[i,6]), as.character(FinnBRGCH[i,7]), as.character(FinnBRGCH[i,8]),as.character(FinnBRGCH[i,9]),as.character(FinnBRGCH[i,14]),"france"))
  lon[i]<-(ll[[i]])[1]
  lat[i]<-(ll[[i]])[2]
}
plot(BRGll)
points(lon,lat, pch = 21, cex=5, bg = "red")
title(main="Pharmacie en Bourgogne")
plot(dptll,add=T,xlim=c(2.5,5.6),lwd=2)
df<-(lon,lat)
library("spatstat")
p<-ppp(as.numeric(lon[-which(is.na(lon))]),as.numeric(lat)[-which(is.na(lat))])
ggmap(get_map("Bourgogne"), extent = "panel", maprange=FALSE) 
+   geom_density2d(data = df, aes(x = lon, y = lat)) 
+   stat_density2d(data = df, aes(x = lon, y = lat,  fill = ..level.., alpha = ..level..), size = 0.01, bins = 16, geom = 'polygon') 
+   scale_fill_gradient(low = "green", high = "red") 
+   scale_alpha(range = c(0.00, 0.25), guide = FALSE) 
get_openstreetmap(bbox=c(left=2.83,bottom=46,right=5.52,top=48.5))

BRGll.f<-fortify(BRGll, region = "INSEE_COM")

#création du df contenant toutes les communes avec le NbrPH en face
dfNb<-data.frame(CI=BRGll$INSEE_COM,Nb=0)
for(i in 1:length(which(dfNb$CI %in% dfCP$CI))){
  dfNb$Nb[which(dfNb$CI %in% dfCP$CI)[i]]<-dfCP$Nbr[which(dfCP$CI==dfNb$CI[which(dfNb$CI %in% dfCP$CI)[i]])]
}

#création de la BDD unique contenant l'ensemble des informations nécessaires au plot
BRGll.m<-merge(BRGll.f,dfNb,by.x="id",by.y="CI")

#ne marche pas
Map <- ggplot(BRGll.m, aes(long, lat, group = group, fill=Nb))+geom_polygon()
Map <- ggplot(BRGll.m, aes(long, lat, group = group, fill=Nb))+geom_density2d()

#nouveau test
lat<-t(lat)
lon<-t(lon)
lat<-as.numeric(lat)
lon<-as.numeric(lon)
lat[which(lon<=2.5)]<-NA
lon[which(lon<=2.5)]<-NA
dfll<-data.frame(lon=lon,lat=lat)
BRGmap<-ggplot(BRGll, aes(long,lat,group=group)) + geom_polygon(fill="white") + geom_path(color="black")
BRGmap
BRGmap.1<-BRGmap+geom_point(data=dfll,mapping=aes(x=lon,y=lat,group=""), na.rm = TRUE,color="red")
BRGmap.1
BRGmap.2<-BRGmap.1+stat_density2d(data=dfll,mapping=aes(x=lon,y=lat,group="",fill = ..level..),geom='polygon', na.rm = TRUE,bins=50)
BRGmap.2

BRGmap.1+geom_path(data=dptll,mapping=aes(x=lon,y=lat,group=""),color="black")

BRGmap.3<-BRGmap.2+scale_alpha_continuous(limits=c(0,1),breaks=c(0,1,2,5,10,25,50,100))
BRGmap.3


#estimation de la densité par KernSmooth
#test1 -> non concluant
H <- Hpi(x=dfll[-which(is.na(dfll$lon)),])
H1=matrix(c(sqrt(H[1,1]*H[2,2]),0,0,sqrt(H[1,1]*H[2,2])),2,2)
fhat <- kde(x=dfll[-which(is.na(dfll$lon)),], H=H)
#test2
mkd<-as.matrix(dfll)
kd<-bkde2D(mkd,2)


BRGmap.4<-ggplot(BRGll, aes(long,lat,group=group)) + geom_polygon(fill="white") + geom_path(color="black")+geom_contour(data = data.frame(x=fhat$eval.points[[1]],y=fhat$eval.points[[2]]), mapping = aes(x=fhat$eval.points[[1]],y=fhat$eval.points[[2]],group=""))
BRGmap.4

#test-nonfonctionnel
BRGmap.2<-BRGmap.1+geom_contour(data = dfll1, aes(x = lon, y = lat, group=""),z=5, alpha = 0.5, colour = " white ")
BRGmap.2
est <- bkde2D(dfll[!which(is.na(dfll$x)),], bandwidth=c(3,3), gridsize=c(15,15), range.x=list(c(2.8,5.54),c(46.1,48.41)))
est$fhat[est$fhat<0.00001] <- 0
est.raster = raster(list(x=est$x1,y=est$x2,z=est$fhat))
projection(est.raster) <- CRS("+init=epsg:4326")
#xmin(est.raster) <- 2.8
#xmax(est.raster) <- 5.54
#ymin(est.raster) <- 46.1
#ymax(est.raster) <- 48.41
xmin(est.raster) <- -180
xmax(est.raster) <- 180
ymin(est.raster) <- -90
ymax(est.raster) <- 90
plot(est.raster)

#adaptation freakeconomics
lissage_without_c = function(U,polygone,optimal=TRUE,h=.1){
  n=nrow(U)
  IND=which(is.na(U[,1])==FALSE)
	U=U[IND,]
	if(optimal==TRUE) {
		H=Hpi(U,binned=FALSE);
		H=matrix(c(sqrt(H[1,1]*H[2,2]),0,0,sqrt(H[1,1]*H[2,2])),2,2)
	}
	if(optimal==FALSE){
		H= matrix(c(h,0,0,h),2,2)
	}
	fhat=kde(U,H,xmin=c(min(polygone[,1],na.rm=TRUE),min(polygone[,2],na.rm=TRUE)),xmax=c(max(polygone[,1],na.rm=TRUE),max(polygone[,2],na.rm=TRUE)))
	vx=unlist(fhat$eval.points[1])
	vy=unlist(fhat$eval.points[2])
	VX = cbind(rep(vx,each=length(vy)))
	VY = cbind(rep(vy,length(vx)))
	VXY=cbind(VX,VY)
	Ind=matrix(point.in.polygon(VX,VY, polygone[,1],polygone[,2]),length(vy),length(vx))
	f0=fhat
	f0$estimate[t(Ind)==0]=NA
	return(list(X=fhat$eval.points[[1]],Y=fhat$eval.points[[2]],Z=fhat$estimate,ZNA=f0$estimate,H=fhat$H,W=fhat$W))
}
lissage<-lissage_without_c(dfll,listBRGdpt[[7]],optimal=TRUE)
breaks=range(c(range(lissage$Z,na.rm=TRUE),range(lissage$Z,na.rm=TRUE)))
breaks=seq(min(breaks)*.95,max(breaks)*1.05,length=100)
xlim1<-c(min(listBRGdpt[[7]][,1])-(range(listBRGdpt[[7]][,1])[2]-range(listBRGdpt[[7]][,1])[1])*0.04,max(listBRGdpt[[7]][,1])+(range(listBRGdpt[[7]][,1])[2]-range(listBRGdpt[[7]][,1])[1])*0.04)
ylim1<-c(min(listBRGdpt[[7]][,2])-(range(listBRGdpt[[7]][,2])[2]-range(listBRGdpt[[7]][,2])[1])*0.04,max(listBRGdpt[[7]][,2])+(range(listBRGdpt[[7]][,2])[2]-range(listBRGdpt[[7]][,2])[1])*0.04)
image.plot(lissage$X,lissage$Y,(lissage$ZNA),xlim=xlim1, ylim=ylim1,  breaks=breaks, col=rev(heat.colors(length(breaks)-1)),xlab="longitude",bty="l",ylab="latitude",main="Densité de pharmacie en Bourgogne",zlim=range(breaks),horizontal=TRUE)
points(dfll[,1],dfll[,2],pch=19,cex=.2,col="red")
polygon(listBRGdpt[[7]],lwd=2)
polygon(listBRGdpt[[1]],lwd=1)
polygon(listBRGdpt[[2]],lwd=1)
polygon(listBRGdpt[[3]],lwd=1)
polygon(listBRGdpt[[4]],lwd=1)
polygon(listBRGdpt[[5]],lwd=1)
polygon(listBRGdpt[[6]],lwd=1)
contour(lissage$X,lissage$Y,nlevels = 20,lissage$ZNA,add=TRUE,drawlabels = FALSE,col="grey")

#heatmap text x
smoothScatter(lon,lat,nbin=200,nrpoints=0,colramp = colorRampPalette(c("red", "green")),bandwidth=0.10,ylab="latitude",xlab="longitude",main="Densité de pharmacie en Bourgogne")
plot(BRGll,add=T)
#dpt<-readOGR ("./SHP/GEOFLA", layer="DEPARTEMENT", stringsAsFactors=FALSE)
#dptll<-spTransform(dpt,CRS("+proj=longlat +ellps=WGS84"))
#plot(dptll,lwd=2,add=T)
#vecBRG<-which(dptll$CODE_DEPT %in% c(21,58,71,89))
#dptll@polygons<-dptll@polygons[-vecBRG]
plot(wBRGdptll,col="white",add=T,lwd=2,xlim=c(4,5.6),ylim=c(46,48.6))
plot(BRGdptll, lwd=2,add=T)
Dij<-geocode("Dijon")
Nev<-geocode("Nevers")
Cha<-geocode("Chalon")
Aux<-geocode("Auxerre")
Mac<-geocode("Macon Bourgogne")
points(Dij[1],Dij[2],col="red",pch=19)
points(Nev[1],Nev[2],col="red",pch=19)
points(Cha[1],Cha[2],col="red",pch=19)
points(Aux[1],Aux[2],col="red",pch=19)
points(Mac[1],Mac[2],col="red",pch=19)
points(c(Aux[1],3.78),c(Aux[2],48.2),type="l",lwd=2)
text(4,48.2,"Auxerre")
points(c(Dij[1],5.05),c(Dij[2],47.75),type="l",lwd=2)
text(5.2,47.75,"Dijon")
text(5.05,46.25,"Macon")
points(c(Cha[1],4.97),c(Cha[2],46.35),type="l",lwd=2)
text(5.15,46.35,"Chalon")
points(c(Nev[1],3.2),c(Nev[2],46.60),type="l",lwd=2)
text(3.4,46.6,"Nevers")

dfBRGPop<-data.frame(x<-BRG$X_CENTROID*100,y<-BRG$Y_CENTROID*100,POP<-BRG$POPULATION)
colnames(dfBRGPop)<-c("x","y","Pop")
coordinates(dfBRGPop) <- ~x+y
proj4string(dfBRGPop) <- CRS("+proj=lcc +lat_1=44 +lat_2=49 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +units=m +no_defs")
dfBRGPop<-spTransform(dfBRGPop,CRS("+proj=longlat +ellps=WGS84"))
summary(dfBRGPop)

#remanier dptll
dpt<-readOGR ("./SHP/GEOFLA", layer="DEPARTEMENT", stringsAsFactors=FALSE)
dptll<-spTransform(dpt,CRS("+proj=longlat +ellps=WGS84"))
vecBRG<-which(dptll$CODE_DEPT %in% c(21,58,71,89))
BRGdptll<-dptll
BRGdptll@polygons<-dptll@polygons[vecBRG]
for(i in 1:length(dptll@data)){
  BRGdptll@data[i]<-(dptll@data[[i]])[vecBRG]
}
BRGdptll@data<-BRGdptll@data[1:4,]
BRGdptll@plotOrder<-1:4
xminBRG<-min(c(BRGdptll@polygons[[1]]@Polygons[[1]]@coords[,1]),c(BRGdptll@polygons[[1]]@Polygons[[2]]@coords[,1]),c(BRGdptll@polygons[[2]]@Polygons[[1]]@coords[,1]),c(BRGdptll@polygons[[3]]@Polygons[[1]]@coords[,1]),c(BRGdptll@polygons[[3]]@Polygons[[2]]@coords[,1]),c(BRGdptll@polygons[[4]]@Polygons[[1]]@coords[,1]))
yminBRG<-min(c(BRGdptll@polygons[[1]]@Polygons[[1]]@coords[,2]),c(BRGdptll@polygons[[1]]@Polygons[[2]]@coords[,2]),c(BRGdptll@polygons[[2]]@Polygons[[1]]@coords[,2]),c(BRGdptll@polygons[[3]]@Polygons[[1]]@coords[,2]),c(BRGdptll@polygons[[3]]@Polygons[[2]]@coords[,2]),c(BRGdptll@polygons[[4]]@Polygons[[1]]@coords[,2]))
xmaxBRG<-max(c(BRGdptll@polygons[[1]]@Polygons[[1]]@coords[,1]),c(BRGdptll@polygons[[1]]@Polygons[[2]]@coords[,1]),c(BRGdptll@polygons[[2]]@Polygons[[1]]@coords[,1]),c(BRGdptll@polygons[[3]]@Polygons[[1]]@coords[,1]),c(BRGdptll@polygons[[3]]@Polygons[[2]]@coords[,1]),c(BRGdptll@polygons[[4]]@Polygons[[1]]@coords[,1]))
ymaxBRG<-max(c(BRGdptll@polygons[[1]]@Polygons[[1]]@coords[,2]),c(BRGdptll@polygons[[1]]@Polygons[[2]]@coords[,2]),c(BRGdptll@polygons[[2]]@Polygons[[1]]@coords[,2]),c(BRGdptll@polygons[[3]]@Polygons[[1]]@coords[,2]),c(BRGdptll@polygons[[3]]@Polygons[[2]]@coords[,2]),c(BRGdptll@polygons[[4]]@Polygons[[1]]@coords[,2]))
BRGdptll@bbox[,1]<-c(xminBRG,yminBRG)
BRGdptll@bbox[,2]<-c(xmaxBRG,ymaxBRG)
plot(BRGdptll)

dfBRGdptll<-data.frame(x=c(BRGdptll@polygons[[1]]@Polygons[[1]]@coords[,1],BRGdptll@polygons[[1]]@Polygons[[2]]@coords[,1],BRGdptll@polygons[[2]]@Polygons[[1]]@coords[,1],BRGdptll@polygons[[3]]@Polygons[[1]]@coords[,1],BRGdptll@polygons[[3]]@Polygons[[2]]@coords[,1],BRGdptll@polygons[[4]]@Polygons[[1]]@coords[,1]),
y=c(BRGdptll@polygons[[1]]@Polygons[[1]]@coords[,2],BRGdptll@polygons[[1]]@Polygons[[2]]@coords[,2],BRGdptll@polygons[[2]]@Polygons[[1]]@coords[,2],BRGdptll@polygons[[3]]@Polygons[[1]]@coords[,2],BRGdptll@polygons[[3]]@Polygons[[2]]@coords[,2],BRGdptll@polygons[[4]]@Polygons[[1]]@coords[,2]))

wBRGdptll<-dptll
wBRGdptll@polygons<-dptll@polygons[-vecBRG]
wBRGdptll@data<-BRGdptll@data[1:(length(dptll@data[[1]])-length(vecBRG)),]
for(i in 1:length(dptll@data)){
  wBRGdptll@data[i]<-(dptll@data[[i]])[-vecBRG]
}
wBRGdptll@plotOrder<-1:(length(dptll@data[[1]])-length(vecBRG))
plot(wBRGdptll)

#Construction de la valeur de remplissage dynamique
insee<-read.csv(file.choose(), sep=";", dec=",")
insee$postal_code<-as.character(insee$postal_code)
insee$postal_code[which(nchar(insee$postal_code)==4)]<-paste("0",insee$postal_code[which(nchar(insee$postal_code)==4)],sep="")

Finn.dum<-Finn
Finn.dum<-Finn.dum[which(Finn.dum$TypeES1==620),]
Finn.dum$Fin3<-as.character(Finn.dum$Fin3)

##construction correspondance code insee code postal
CP<-substr(Finn.dum$Fin3, 1, 5)
CP[-which(CP %in% insee$postal_code)]<-paste(substr(CP[-which(CP %in% insee$postal_code)],1,4),"0",sep="")
CP[-which(CP %in% insee$postal_code)]<-paste(substr(CP[-which(CP %in% insee$postal_code)],1,3),"00",sep="")
CP[-which(CP %in% insee$postal_code)]<-paste(substr(CP[-which(CP %in% insee$postal_code)],1,2),"000",sep="")
CorrCPCI<-data.frame(CP=unique(CP),CI=NA)
Pop.CP<-c()
Pop.CP<-as.list(Pop.CP)
Pop.CP.m<-c()
vec<-c()
for(i in 1:length(CorrCPCI[,1])){
  Pop.CP<-as.numeric(as.character(insee$population[which(as.character(CorrCPCI$CP[i])==as.character(insee$postal_code))]))
  Pop.CP.m<-which(Pop.CP==max(Pop.CP,na.rm=T))
  vec<-(which(as.numeric(as.character(CorrCPCI$CP[i]))==as.numeric(as.character(insee$postal_code))))[Pop.CP.m]
  CorrCPCI$CI[i]<-if(!length(vec)){NA} else {as.character(insee$insee_com[vec])}
}
CorrCPCI$CI[CorrCPCI$CP=="45000"]<-"45234"
CorrCPCI$CI[CorrCPCI$CP=="57000"]<-"57463"
CorrCPCI$CI[CorrCPCI$CP=="66000"]<-"66136"
CorrCPCI$CI[CorrCPCI$CP=="67000"]<-"67482"
CorrCPCI$CI[CorrCPCI$CP=="76000"]<-"76540"
CorrCPCI$CI.f<-as.character(CorrCPCI$CI)
CorrCPCI$CI<-as.character(CorrCPCI$CI)
CorrCPCI$CI[which(nchar(CorrCPCI$CI)==4)]<-paste("0",CorrCPCI$CI[which(nchar(CorrCPCI$CI)==4)],sep="")
CorrCPCI$CI.f[which(nchar(CorrCPCI$CI.f)==4)]<-paste("0",CorrCPCI$CI.f[which(nchar(CorrCPCI$CI.f)==4)],sep="")

#Nbr de type d'ES(Finn$Fin3)
df.dum<-data.frame(CP=CorrCPCI$CP,CI=CorrCPCI$CI)
for(i in 1:length(df.dum[,1])){
  df.dum[i,3]<-length(which(CP==df.dum$CP[i]))
}

df.dum.1<-data.frame(CI=unique(df.dum$CI))
for(i in 1:length(unique(df.dum.1$CI))){
  df.dum.1$Nbr[i]<-sum((df.dum[,3])[which(df.dum$CI==df.dum.1$CI[i])])
}

df.Comm<-data.frame(CI=as.character(Comm$INSEE_COM),map.id=Comm$ID_GEOFLA,Nbr=0)
for(i in 1:length(which(df.Comm$CI %in% df.dum.1$CI))){
    df.Comm$Nbr[which(df.Comm$CI %in% df.dum.1$CI)[i]]<-df.dum.1$Nbr[which(as.character(df.dum.1$CI)==as.character(df.Comm$CI[which(df.Comm$CI %in% df.dum.1$CI)][i]))]
}

#carte Comm
Dep.f.dum<-Dep.f
Dep.f.dum$id<-as.factor(Dep.f.dum$id)
Dep.f.dum<-Dep.f.dum[which(Dep.f.dum$id %in% as.factor(Dep$ID_GEOFLA[which(as.factor(Dep$CODE_REG)=="72")])),]
Comm.f.dum<-Comm.f
Comm.f.dum$id<-as.factor(Comm.f.dum$id)
Comm.f.dum<-Comm.f.dum[which(Comm.f.dum$id %in% as.factor(Comm$ID_GEOFLA[which(as.factor(Comm$CODE_REG)=="72")])),]

df.Comm.dum<-df.Comm
df.Comm.dum<-df.Comm.dum[which(df.Comm$map.id %in% Comm$ID_GEOFLA[which(as.factor(Comm$CODE_REG)=="72")]),]
breaks<-c(0,1,5,25,max(df.Comm.dum$Nbr))
df.Comm.dum$Nbr.c<-cut(df.Comm.dum$Nbr,breaks=breaks,include.lowest = TRUE,right=F)
col<-c("white",(brewer.pal(length(breaks),"Blues"))[-1])
map<-ggplot(data=df.Comm.dum,aes(map_id=map.id)) +
  geom_map(map=Comm.f.dum,aes(fill=Nbr.c, map_id=map.id),colour="gray") +
  geom_map(data=dfPhrc.Dep, aes(map_id=dfPhrc.Dep$map.id),map=Dep.f.dum,colour="black",alpha=0.1) +
  geom_map(data=dfPhrc.Reg, aes(map_id=dfPhrc.Reg$map.id),map=Reg.f,colour="black",fill="white",size=1.25,alpha=0.1) +
  expand_limits(x = Dep.f.dum$long, y = Dep.f.dum$lat) +
  theme(legend.position = "bottom") +
  scale_fill_manual(aes(fill=Nbr.c),values=col) +
  guides(fill = guide_legend(title="Nbr de pharmacies")) +
  xlab("Longitude") +
  ylab("Latitude")
print(map)

#Remontée Comm->Cant

dum<-paste(Cant$CODE_DEPT,Cant$CODE_ARR,Cant$CODE_CANT,sep="-")
dum.2<-paste(Comm$CODE_DEPT,Comm$CODE_ARR,Comm$CODE_CANT,sep="-")
df.Cant<-data.frame(map.id=Cant$ID_GEOFLA)
for(i in 1:length(df.Cant[,1])){
  df.Cant$Nbr[i]<-sum(df.Comm$Nbr[which(dum.2 %in% dum[i])])
}

#Carte Cant
Dep.f.dum<-Dep.f
Dep.f.dum$id<-as.factor(Dep.f.dum$id)
Dep.f.dum<-Dep.f.dum[which(Dep.f.dum$id %in% as.factor(Dep$ID_GEOFLA[which(as.factor(Dep$CODE_REG)=="26")])),]
Cant.f.dum<-Cant.f
Cant.f.dum$id<-as.factor(Cant.f.dum$id)
Cant.f.dum<-Cant.f.dum[which(Cant.f.dum$id %in% as.factor(Cant$ID_GEOFLA[which(as.factor(Cant$CODE_REG)=="26")])),]
df.Cant.dum<-df.Cant
df.Cant.dum<-df.Cant.dum[which(df.Cant.dum$map.id %in% Cant$ID_GEOFLA[which(as.factor(Cant$CODE_REG)==input$Reg)]),]
breaks<-quantile(df.Cant.dum$Nbr,probs=seq(0,1,1/input$nbrcat))
df.Cant.dum$Nbr.c<-cut(df.Cant.dum$Nbr,breaks=breaks,include.lowest = TRUE,right=F)
col<-c("white",(brewer.pal(length(breaks),"Blues"))[-1])
map<-ggplot(data=df.Cant.dum,aes(map_id=map.id)) +
  geom_map(map=Cant.f.dum,data=df.Cant.dum,aes(fill=Nbr.c),colour="gray") +
  geom_map(data=dfPhrc.Dep, aes(map_id=dfPhrc.Dep$map.id),map=Dep.f.dum,colour="black",alpha=0.1) +
  geom_map(data=dfPhrc.Reg, aes(map_id=dfPhrc.Reg$map.id),map=Reg.f,colour="black",fill="white",size=1.25,alpha=0.1) +
  expand_limits(x = Dep.f.dum$long, y = Dep.f.dum$lat) +
  theme(legend.position = "bottom") +
  scale_fill_manual(aes(fill=Nbr.c),values=col) +
  guides(fill = guide_legend(title="Nbr de pharmacies")) +
  xlab("Longitude") +
  ylab("Latitude")
print(map)

#Remontée Comm -> arrd
dum<-paste(Arrd$CODE_DEPT,Arrd$CODE_ARR,sep="-")
dum.2<-paste(Comm$CODE_DEPT,Comm$CODE_ARR,sep="-")
df.Arrd<-data.frame(map.id=Arrd$ID_GEOFLA)
for(i in 1:length(df.Arrd[,1])){
  df.Arrd$Nbr[i]<-sum(df.Comm$Nbr[which(dum.2 %in% dum[i])])
}

#Carte Arrd
Dep.f.dum<-Dep.f
Dep.f.dum$id<-as.factor(Dep.f.dum$id)
Dep.f.dum<-Dep.f.dum[which(Dep.f.dum$id %in% as.factor(Dep$ID_GEOFLA[which(as.factor(Dep$CODE_REG)=="26")])),]
Arrd.f.dum<-Arrd.f
Arrd.f.dum$id<-as.factor(Arrd.f.dum$id)
Arrd.f.dum<-Arrd.f.dum[which(Arrd.f.dum$id %in% as.factor(Arrd$ID_GEOFLA[which(as.factor(Arrd$CODE_REG)=="26")])),]
df.Arrd.dum<-df.Arrd
df.Arrd.dum<-df.Arrd.dum[which(df.Arrd.dum$map.id %in% Arrd$ID_GEOFLA[which(as.factor(Arrd$CODE_REG)=="26")]),]
breaks<-quantile(df.Arrd.dum$Nbr,probs=seq(0,1,1/4))
df.Arrd.dum$Nbr.c<-cut(df.Arrd.dum$Nbr,breaks=breaks,include.lowest = TRUE,right=F)
col<-c("white",(brewer.pal(length(breaks),"Blues"))[-1])
map<-ggplot(data=df.Arrd.dum,aes(map_id=map.id)) +
  geom_map(map=Arrd.f.dum,data=df.Arrd.dum,aes(fill=Nbr.c),colour="gray") +
  geom_map(data=dfPhrc.Dep, aes(map_id=dfPhrc.Dep$map.id),map=Dep.f.dum,colour="black",alpha=0.1) +
  geom_map(data=dfPhrc.Reg, aes(map_id=dfPhrc.Reg$map.id),map=Reg.f,colour="black",fill="white",size=1.25,alpha=0.1) +
  expand_limits(x = Dep.f.dum$long, y = Dep.f.dum$lat) +
  theme(legend.position = "bottom") +
  scale_fill_manual(aes(fill=Nbr.c),values=col) +
  guides(fill = guide_legend(title="Nbr de pharmacies")) +
  xlab("Longitude") +
  ylab("Latitude")
print(map)

#remontée Comm -> Dep
dum<-paste(Dep$CODE_DEPT,sep="-")
dum.2<-paste(Comm$CODE_DEPT,sep="-")
df.Dep<-data.frame(map.id=Dep$ID_GEOFLA)
for(i in 1:length(df.Dep[,1])){
    df.Dep$Nbr[i]<-sum(df.Comm$Nbr[which(dum.2 %in% dum[i])])
}

#Carte Dep
Dep.f.dum<-Dep.f
Dep.f.dum$id<-as.factor(Dep.f.dum$id)
Dep.f.dum<-Dep.f.dum[which(Dep.f.dum$id %in% as.factor(Dep$ID_GEOFLA[which(as.factor(Dep$CODE_REG)=="26")])),]
df.Dep.dum<-df.Dep
df.Dep.dum<-df.Dep.dum[which(df.Dep.dum$map.id %in% Dep$ID_GEOFLA[which(as.factor(Dep$CODE_REG)=="26")]),]
breaks<-quantile(df.Dep.dum$Nbr,probs=seq(0,1,1/4))
df.Dep.dum$Nbr.c<-cut(df.Dep.dum$Nbr,breaks=breaks,include.lowest = TRUE,right=F)
col<-c("white",(brewer.pal(length(breaks),"Blues"))[-1])
map<-ggplot(data=df.Dep.dum,aes(map_id=map.id)) +
  geom_map(map=Dep.f.dum,data=df.Dep.dum,aes(fill=Nbr.c),colour="black") +
  geom_map(data=dfPhrc.Reg, aes(map_id=dfPhrc.Reg$map.id),map=Reg.f,colour="black",fill="white",size=1.25,alpha=0.1) +
  expand_limits(x = Dep.f.dum$long, y = Dep.f.dum$lat) +
  theme(legend.position = "bottom") +
  scale_fill_manual(aes(fill=Nbr.c),values=col) +
  guides(fill = guide_legend(title="Nbr de pharmacies")) +
  xlab("Longitude") +
  ylab("Latitude")
print(map)

#remontée Comm -> Reg
dum<-paste(Reg$CODE_REG,sep="-")
dum.2<-paste(Comm$CODE_REG,sep="-")
Reg$ID_GEOFLA<-1:length(Reg[,1])
df.Reg<-data.frame(map.id=Reg$ID_1)
for(i in 1:length(df.Reg[,1])){
    df.Reg$Nbr[i]<-sum(df.Comm$Nbr[which(dum.2 %in% dum[i])])
}

##
Finn.dum<-Finn
Finn.dum<-Finn.dum[which(Finn.dum$TypeES1==620),]
Finn.dum<-Finn.dum[1:length(lat),]
Dept<-substr(Finn.dum$Comm, 1, 2)
Reg<-
dfheat<-data.frame(x=unlist(lon),y=unlist(lat),Dept=Dept)
dfheat.dum<-dfheat[-which(dfheat$x<range(Dep@bbox[1,])[1]),]
dfheat.dum<-dfheat.dum[-which(dfheat.dum$x>range(Dep@bbox[1,])[2]),]
dfheat.dum<-dfheat.dum[-which(is.na(dfheat.dum$x)),]
dfheat.dum<-dfheat.dum[which(dfheat.dum$Dept %in% Dep$ID_GEOFLA[which(as.factor(Dep$CODE_REG)=="26")]),]
bins<-15
map<-ggplot() +
    geom_map(map=Dep.f,aes(map_id=df.Dep$map.id),colour="black",fill="white",alpha=0.5) +
    geom_map(data=df.Reg, aes(map_id=df.Reg$map.id),map=Reg.f,colour="black",fill="white",size=1.25,alpha=0.1) +
    geom_point(data=dfheat.dum, aes(x=dfheat.dum$x, y=dfheat.dum$y),col="red")+
    stat_density2d(data=dfheat.dum, aes(x=dfheat.dum$x, y=dfheat.dum$y, fill = ..level.., alpha=..level..), size=8, bins=bins,geom="polygon")+
    scale_alpha_continuous(range=c(0.01,0.5))+
    scale_fill_gradient(low = "red", high="blue") +
    expand_limits(x = Dep.f$long, y = Dep.f$lat) +
    #theme(legend.position = "bottom") +
    guides(fill = guide_legend(title="Nbr de pharmacies")) +
    xlab("Longitude") +
    ylab("Latitude")
print(map)

range(Dep@bbox[1,])
range(Dep@bbox[2,])
> range(Dep@bbox[1,])
[1] -5.139017  9.559823
> range(Dep@bbox[2,])
[1] 41.36276 51.08900
dfheat.dum<-dfheat[-which(dfheat$x<range(Dep@bbox[1,])[1]),]
dfheat.dum<-dfheat.dum[-which(dfheat.dum$x>range(Dep@bbox[1,])[2]),]
dfheat.dum<-dfheat.dum[-which(is.na(dfheat.dum$x)),]

library(MASS)
library(reshape2)
test<-kde2d(dfheat.dum$x,dfheat.dum$y)
test.z<-melt(test$z)
names(test.z) <- c("x", "y", "z")
test.z$x<-unlist(test$x)
test.z$y<-unlist(test$y)
v <- ggplot(test.z, aes(x, y, z = z)) + stat_contour()

v <- ggplot(dfheat.dum, aes(x, y)) + geom_point(data=dfheat.dum, aes(x=dfheat.dum$x, y=dfheat.dum$y))+geom_density2d(data=dfheat.dum, aes(x=dfheat.dum$x, y=dfheat.dum$y))

#à consolider
map.h<-map+geom_point(data=dfheat.dum, aes(x=dfheat.dum$x, y=dfheat.dum$y))+geom_density2d(data=dfheat.dum, aes(x=dfheat.dum$x, y=dfheat.dum$y))
print(map)

#utilisation de kde2d
contour(x=sort(unique(test.z$x)),y=sort(unique(test.z$y)),z=test$z)

## outils
df.dum$CI[-which(df.dum$CI %in% df.dum.2$CI)]
length(unique(df.dum$CI))
summary(df.dum[,3][which(df.dum[,3]!=0)])
summary(df.dum.2$Nbr[which(df.dum.2$Nbr!=0)])

## A commenter
Comm.f<-fortify(Comm,region="ID_5")
Comm.f.dum<-Comm.f
Comm.f.dum<-Comm.f.dum[which(Dep.f.dum$id %in% as.factor(Dep$ID_2[which(Dep$ID_1==levels(as.factor(Dep$ID_1))[3])])),]
Comm.id.dum<-Comm$ID_5[which(Comm.f.dum$id %in% as.character(Comm$ID_5[which(Comm$ID_1==levels(as.factor(Comm$ID_1))[3])])),]

Dep.f.dum<-Dep.f[which(Dep.f.dum$id %in% as.factor(Dep$ID_2[which(Dep$ID_1==levels(as.factor(Dep$ID_1))[3])])),]

#dfPhrc de test
Comm.id.dum<-as.numeric(Comm$ID_5[which(Comm$ID_1==levels(as.factor(Comm$ID_1))[2])])
dfPhrc.Dept<-data.frame(val=rnorm(length(Dept[,1]),100,5),map.id=Dept$ID_2)
dfPhrc.Comm<-data.frame(val=rnorm(length(Comm[,1]),100,5),map.id=Comm$ID_5)
dfPhrc.Reg<-data.frame(val=rnorm(length(Reg[,1]),100,5),map.id=Reg$ID_1)
dfPhrc.Arrd<-data.frame(val=rnorm(length(Arrd[,1]),100,5),map.id=Arrd$ID_3)
dfPhrc.Cant<-data.frame(val=rnorm(length(Cant[,1]),100,5),map.id=Cant$ID_4)

map<-ggplot(data=dfPhrc.Comm,aes(map_id=dfPhrc.Comm$map.id))+geom_map(map=Comm.f.dum,colour="black",fill="white") + expand_limits(x = Dep.f.dum$long, y = Dep.f.dum$lat)

Dep.f.dum<-Dep.f
Dep.f.dum$id[which(Dep.f.dum$id %in% c("96","97"))]<-"20"
Dep.f.dum$id<-as.factor(Dep.f.dum$id)
Dep.f.dum<-Dep.f.dum[which(Dep.f.dum$id %in% as.factor(Dep$ID_2[which(Dep$ID_1=="26")])),]
Comm.f.dum<-Comm.f
Comm.f.dum$id<-as.factor(Comm.f.dum$id)
Comm.f.dum<-Comm.f.dum[which(Comm.f.dum$id %in% as.factor(Comm$ID_5[which(Comm$ID_1=="26")])),]
map<-ggplot(data=dfPhrc.Comm,aes(map_id=dfPhrc.Comm$map.id))+geom_map(map=Comm.f.dum,colour="black",fill="white")+geom_map(map=Dep.f.dum,colour="black",fill="white",size=1.25,alpha=0.1) + expand_limits(x = Dep.f.dum$long, y = Dep.f.dum$lat)

map<-ggplot(data=dfPhrc.Dep,aes(map_id=dfPhrc.Dep$Dep.ID_2))+geom_map(map=Dep.f,colour="black",fill="white") + expand_limits(x = Dep.f$long, y = Dep.f$lat)

#Résolution du problème Cant
Cant$id<-1:length(Cant[,1])
Cant.f<-fortify(Cant,region="id")
dfPhrc.Cant<-data.frame(val=rnorm(length(Cant[,1]),100,5),map.id=Cant$id)

# h et w

h.e<-range(Dep.f.dum$lat)[2]- range(Dep.f.dum$lat)[1]
w.e<-range(Dep.f.dum$lon)[2]- range(Dep.f.dum$lon)[1]
if(h.e<=110/80*w.e){ 
  w=600
  h=600*h.e/w.e
}
if(h.e>110/80*w.e){
  h=600
  w=600*h.e/w.e
}

map<-ggplot(data=dfPhrc.Dep,aes(map_id=dfPhrc.Dep$map.id))+geom_map(aes(fill=val),map=Dep.f,colour="black")+geom_map(map=Reg.f,colour="black",fill="white",size=1.25,alpha=0.1) + expand_limits(x = Dep.f$long, y = Dep.f$lat)

map<-ggplot(data=dfPhrc.Dep,aes(map_id=dfPhrc.Dep$map.id))+geom_map(aes(fill=val),map=Dep.f,colour="black")+geom_map(map=Reg.f,colour="black",fill="white",size=1.25,alpha=0.1)+geom_map(map=pays,colour="black",fill="white",size=1.25,alpha=0.1) + expand_limits(x = Dep.f$long, y = Dep.f$lat)

map<-ggplot()+geom_map(map=pays,colour="black",fill="white",size=1.25,alpha=0.1) + expand_limits(x = Dep.f$long, y = Dep.f$lat)

map<-ggplot(data=dfPhrc.Dep,aes(map_id=dfPhrc.Dep$map.id))+
    geom_map(map=Comm.f.dum,aes(fill=dfPhrc.Dep$Nbr),colour="black")+
    geom_map(map=Dep.f.dum,aes(fill=dfPhrc.Dep$val),colour="black",,size=1.25,alpha=0.1)+
    geom_map(map=Reg.f,colour="black",fill="white",size=1.5,alpha=0.1)+
    expand_limits(x = Dep.f.dum$long, y = Dep.f.dum$lat)+
    theme(legend.position = "bottom") +
    scale_fill_gradient(low="lightgray", high="darkblue") +
    guides(fill = guide_colorbar(barwidth = 10, barheight = .5, title="Nbr de pharmacies"))+
    xlab("Longitude") +
    ylab("Latitude")
print(map)

FinnPhrc
CP<-substr(Finn$Fin3, 1, 5)
dfPhrc<-data.frame(CP)
dfPhrc$CI<-0
for(i in 1:length(CP)){
  which(
  max(Comm$POPULATION)
}

insee<-read.csv("insee_2.csv", sep=";", dec=",")


#GEOFLA
Dep<-readOGR ("./SHP/GEOFLA", layer="DEPARTEMENT", stringsAsFactors=FALSE)
Dep<-spTransform(Dep,CRS("+proj=longlat +ellps=WGS84"))
Dep.f<-fortify(Dep,region="ID_GEOFLA")
map<-ggplot(data=dfPhrc.Dep,aes(map_id=dfPhrc.Dep$map.id))+geom_map(map=Dep.f,colour="black",fill="white") + expand_limits(x = Dep.f$long, y = Dep.f$lat)

Reg.f<-fortify(Dep,region="CODE_REG")
map<-ggplot(data=dfPhrc.Reg,aes(map_id=dfPhrc.Reg$map.id))+geom_map(map=Reg.f,colour="black",fill="white") + expand_limits(x = Reg.f$long, y = Reg.f$lat)

Arrd<-readOGR ("./SHP/GEOFLA", layer="ARRONDISSEMENT", stringsAsFactors=FALSE)
Arrd<-spTransform(Arrd,CRS("+proj=longlat +ellps=WGS84"))
Arrd.f<-fortify(Arrd,region="ID_GEOFLA")
map<-ggplot(data=dfPhrc.Arrd,aes(map_id=dfPhrc.Arrd$map.id))+geom_map(map=Arrd.f,colour="black",fill="white") + expand_limits(x = Arrd.f$long, y = Arrd.f$lat)

Cant<-readOGR ("./SHP/GEOFLA", layer="CANTON", stringsAsFactors=FALSE)
Cant<-spTransform(Cant,CRS("+proj=longlat +ellps=WGS84"))
Cant.f<-fortify(Cant,region="ID_GEOFLA")
map<-ggplot(data=dfPhrc.Cant,aes(map_id=dfPhrc.Cant$map.id))+geom_map(map=Cant.f,colour="black",fill="white") + expand_limits(x = Cant.f$long, y = Cant.f$lat)

Comm<-readOGR ("./SHP/GEOFLA", layer="COMMUNE", stringsAsFactors=FALSE)
Comm<-spTransform(Comm,CRS("+proj=longlat +ellps=WGS84"))
Comm.f<-fortify(Comm,region="ID_GEOFLA")
map<-ggplot(data=dfPhrc.Comm,aes(map_id=dfPhrc.Comm$map.id))+geom_map(map=Comm.f,colour="black",fill="white") + expand_limits(x = Comm.f$long, y = Comm.f$lat)
print(map)


#à retenir !
install.packages(file.choose(), repos=NULL) #permet d'installer des packages en local
